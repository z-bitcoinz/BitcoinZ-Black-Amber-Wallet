name: 🚀 Multi-Platform Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.24.5'
  RUST_VERSION: '1.82.0'

jobs:
  # ================================
  # ANDROID BUILD
  # ================================
  build-android:
    name: 🤖 Build Android
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

    - name: 🔍 Verify Rust targets
      run: |
        echo "📋 Installed Rust targets:"
        rustup target list --installed
        echo "✅ Rust setup complete"

    - name: 📱 Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: 🔧 Set up Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26d
        add-to-path: false

    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: rust-android-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          rust-android-${{ runner.os }}-

    - name: 📦 Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: 🔨 Build Rust libraries for Android
      run: |
        # Working in root directory
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH
        
        # Build for all Android architectures
        chmod +x .github/scripts/build-rust-android.sh
        .github/scripts/build-rust-android.sh

    # Flutter Rust Bridge bindings already generated and committed
    # Skipping generation step to avoid package dependency issues
    
    - name: ✅ Verify Rust libraries
      run: |
        chmod +x .github/scripts/verify-rust-libs.sh
        .github/scripts/verify-rust-libs.sh
    
    - name: 📦 Get Flutter dependencies
      run: |
        # Working in root directory
        flutter pub get

    - name: 🔍 Run Flutter analysis
      run: |
        # Working in root directory
        flutter analyze --no-fatal-infos --no-fatal-warnings || true

    - name: 🏗️ Build Android APK
      run: |
        # Working in root directory
        flutter build apk --release --split-per-abi

    - name: 🏗️ Build Android App Bundle
      run: |
        # Working in root directory
        flutter build appbundle --release

    - name: 📤 Upload Android APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          build/app/outputs/flutter-apk/*.apk
          build/app/outputs/bundle/release/*.aab

  # ================================
  # iOS BUILD
  # ================================
  build-ios:
    name: 🍎 Build iOS
    runs-on: macos-14
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: aarch64-apple-ios,x86_64-apple-ios

    - name: 🔍 Verify Rust targets
      run: |
        echo "📋 Installed Rust targets:"
        rustup target list --installed
        echo "✅ Rust setup complete"

    - name: 📱 Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: 🍎 Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: 🔧 Install cargo-lipo
      run: cargo install cargo-lipo

    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: rust-ios-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          rust-ios-${{ runner.os }}-

    - name: 📦 Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: 🔨 Build Rust libraries for iOS
      run: |
        # Working in root directory
        # Use the new script that builds from correct rust directory
        ./scripts/build_rust_ios.sh

    # Flutter Rust Bridge bindings already generated and committed
    # Skipping generation step to avoid package dependency issues
    
    - name: ✅ Verify Rust libraries
      run: |
        chmod +x .github/scripts/verify-rust-libs.sh
        .github/scripts/verify-rust-libs.sh
    
    - name: 📦 Get Flutter dependencies
      run: |
        # Working in root directory
        flutter pub get

    - name: 🔍 Run Flutter analysis
      run: |
        # Working in root directory
        flutter analyze --no-fatal-infos --no-fatal-warnings || true

    - name: 🔧 Verify iOS library linking
      run: |
        chmod +x .github/scripts/fix-ios-library-bundle.sh
        .github/scripts/fix-ios-library-bundle.sh

    - name: 🏗️ Build iOS app (no codesign)
      run: |
        # Working in root directory
        flutter build ios --release --no-codesign

    - name: 📤 Upload iOS app artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: build/ios/iphoneos/Runner.app

  # ================================
  # macOS BUILD
  # ================================
  build-macos:
    name: 🖥️ Build macOS
    runs-on: macos-14
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: x86_64-apple-darwin,aarch64-apple-darwin

    - name: 🔍 Verify Rust targets
      run: |
        echo "📋 Installed Rust targets:"
        rustup target list --installed
        echo "✅ Rust setup complete"

    - name: 📱 Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: 🍎 Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: 🔧 Install cargo-lipo
      run: cargo install cargo-lipo

    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: rust-macos-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          rust-macos-${{ runner.os }}-

    - name: 📦 Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: 🔨 Build Rust libraries for macOS
      run: |
        # Working in root directory
        .github/scripts/build-rust-macos.sh

    # Flutter Rust Bridge bindings already generated and committed
    # Skipping generation step to avoid package dependency issues
    
    - name: ✅ Verify Rust libraries
      run: |
        chmod +x .github/scripts/verify-rust-libs.sh
        .github/scripts/verify-rust-libs.sh
    
    - name: 📦 Get Flutter dependencies
      run: |
        # Working in root directory
        flutter pub get

    - name: 🔍 Run Flutter analysis
      run: |
        # Working in root directory
        flutter analyze --no-fatal-infos --no-fatal-warnings || true

    - name: 🏗️ Build macOS app
      run: |
        # Working in root directory
        flutter build macos --release

    - name: 🔧 Fix macOS library bundling
      run: |
        chmod +x .github/scripts/fix-macos-library-bundle.sh
        .github/scripts/fix-macos-library-bundle.sh

    - name: 🔧 Install create-dmg
      run: |
        # Try to install create-dmg for professional DMG creation
        brew install create-dmg || echo "create-dmg installation failed, will use fallback"

    - name: 📦 Create macOS DMG installer
      run: |
        chmod +x .github/scripts/create-macos-dmg.sh
        .github/scripts/create-macos-dmg.sh

    - name: 📦 Create macOS ZIP (alternative distribution)
      run: |
        cd build/macos/Build/Products/Release
        # Create a ZIP with the signed app bundle and README
        cp "${{ github.workspace }}/.github/scripts/README-MACOS.txt" ./README.txt || echo "README not found, continuing..."
        # Use ditto to create a ZIP that preserves all attributes
        ditto -c -k --sequesterRsrc --keepParent "BitcoinZ Black Amber.app" BitcoinZ-Black-Amber.zip
        # Add the README to the ZIP if it exists
        [ -f README.txt ] && zip -u BitcoinZ-Black-Amber.zip README.txt
        echo "✅ Created ZIP archive: $(ls -lh BitcoinZ-Black-Amber.zip | awk '{print $5}')"

    - name: 📤 Upload macOS app artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-app
        path: |
          build/macos/Build/Products/Release/BitcoinZ-Black-Amber.dmg
          build/macos/Build/Products/Release/BitcoinZ-Black-Amber.zip

  # ================================
  # LINUX BUILD
  # ================================
  build-linux:
    name: 🐧 Build Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: 📱 Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: 🔧 Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang cmake ninja-build pkg-config libgtk-3-dev \
          liblzma-dev libstdc++-12-dev libsecret-1-dev \
          rpm dpkg-dev protobuf-compiler libprotobuf-dev \
          wget fuse

        # Install AppImage tools
        wget -O /tmp/appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x /tmp/appimagetool
        sudo mv /tmp/appimagetool /usr/local/bin/appimagetool

    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: rust-linux-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          rust-linux-${{ runner.os }}-

    - name: 📦 Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: 🔨 Build Rust libraries for Linux
      env:
        PROTOC: /usr/bin/protoc
      run: |
        # Working in root directory
        .github/scripts/build-rust-linux.sh

    # Flutter Rust Bridge bindings already generated and committed
    # Skipping generation step to avoid package dependency issues

    - name: ✅ Verify Rust libraries
      run: |
        chmod +x .github/scripts/verify-rust-libs.sh
        .github/scripts/verify-rust-libs.sh

    - name: 💾 Create initial backup of Rust library
      run: |
        # Create backup immediately after building Rust library
        chmod +x .github/scripts/preserve-rust-library.sh
        .github/scripts/preserve-rust-library.sh backup
    
    - name: 📦 Get Flutter dependencies
      run: |
        # Working in root directory
        flutter pub get

    - name: 🔍 Run Flutter analysis
      run: |
        # Working in root directory
        flutter analyze --no-fatal-infos --no-fatal-warnings || true

    - name: 🔧 Setup native assets for Linux
      run: |
        chmod +x .github/scripts/setup-native-assets.sh
        .github/scripts/setup-native-assets.sh

    - name: 🏗️ Build Linux app
      run: |
        # Working in root directory
        flutter build linux --release

    - name: 🔧 Fix Linux library bundling
      run: |
        chmod +x .github/scripts/fix-linux-library-bundle.sh
        .github/scripts/fix-linux-library-bundle.sh

    - name: 📦 Install flutter_distributor
      run: |
        dart pub global activate flutter_distributor

    - name: 🔍 Backup Rust library before packaging
      run: |
        chmod +x .github/scripts/preserve-rust-library.sh
        .github/scripts/preserve-rust-library.sh backup

    - name: 📦 Build Linux Debian package
      run: |
        # Restore the Rust library before packaging (flutter_distributor runs flutter clean)
        .github/scripts/preserve-rust-library.sh restore
        # Build Debian package
        flutter_distributor package --platform linux --targets deb || true
        # Check package size
        if [ -d "dist" ]; then
          find dist -name "*.deb" -exec sh -c 'echo "DEB package: $(basename {}) - Size: $(ls -lh {} | awk '"'"'{print $5}'"'"')"' \;
        fi

    - name: 📦 Build Linux RPM package
      run: |
        # Restore the Rust library before packaging (flutter_distributor runs flutter clean)
        .github/scripts/preserve-rust-library.sh restore
        # Build RPM package
        flutter_distributor package --platform linux --targets rpm || true
        # Check package size
        if [ -d "dist" ]; then
          find dist -name "*.rpm" -exec sh -c 'echo "RPM package: $(basename {}) - Size: $(ls -lh {} | awk '"'"'{print $5}'"'"')"' \;
        fi

    - name: 📦 Build Linux AppImage
      run: |
        # Restore the Rust library before packaging (flutter_distributor runs flutter clean)
        .github/scripts/preserve-rust-library.sh restore
        # Verify appimagetool is available
        if command -v appimagetool >/dev/null 2>&1; then
          echo "✅ appimagetool found, building AppImage..."
          flutter_distributor package --platform linux --targets appimage || echo "⚠️ AppImage build failed"
        else
          echo "❌ appimagetool not found, skipping AppImage build"
        fi
        # Check package size
        if [ -d "dist" ]; then
          find dist -name "*.AppImage" -exec sh -c 'echo "AppImage: $(basename {}) - Size: $(ls -lh {} | awk '"'"'{print $5}'"'"')"' \; 2>/dev/null || echo "No AppImage files found"
        fi
      continue-on-error: true

    - name: 🔍 Verify package sizes and contents
      run: |
        echo "📦 Checking package sizes..."
        echo "=== DEB Packages ==="
        if ls dist/*/*.deb 2>/dev/null; then
          for deb in dist/*/*.deb; do
            echo "📦 $(basename $deb): $(ls -lh $deb | awk '{print $5}')"
            # Check if the Rust library is included in the package
            dpkg-deb -c "$deb" | grep -E "(libbitcoinz_wallet_rust\.so|\.so)" || echo "⚠️ No Rust library found in DEB package"
          done
        else
          echo "No .deb files found"
        fi

        echo "=== RPM Packages ==="
        if ls dist/*/*.rpm 2>/dev/null; then
          for rpm in dist/*/*.rpm; do
            echo "📦 $(basename $rpm): $(ls -lh $rpm | awk '{print $5}')"
            # Check if the Rust library is included in the package
            rpm -qlp "$rpm" 2>/dev/null | grep -E "(libbitcoinz_wallet_rust\.so|\.so)" || echo "⚠️ No Rust library found in RPM package"
          done
        else
          echo "No .rpm files found"
        fi

        echo "=== AppImage Packages ==="
        ls -lh dist/*/*.AppImage 2>/dev/null || echo "No .AppImage files found"

        echo ""
        echo "📏 Expected size: ~70MB (with 59MB Rust library + Flutter assets)"
        echo "📏 Current small size (~11-13MB) indicates missing Rust library"

    - name: 📦 Create Linux tar.gz archive (fallback)
      run: |
        cd build/linux/x64/release
        tar -czf BitcoinZ-Black-Amber-Linux.tar.gz bundle/

    - name: 📤 Upload Linux app artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-app
        path: |
          dist/**/*.deb
          dist/**/*.rpm
          dist/**/*.AppImage
          build/linux/x64/release/BitcoinZ-Black-Amber-Linux.tar.gz

  # ================================
  # WINDOWS BUILD
  # ================================
  build-windows:
    name: 🪟 Build Windows
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🛠️ Setup Visual Studio environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: 📱 Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: 📦 Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: rust-windows-${{ runner.os }}-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          rust-windows-${{ runner.os }}-

    - name: 📦 Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
        restore-keys: |
          flutter-${{ runner.os }}-

    - name: 🔨 Build Rust libraries for Windows
      run: |
        # Working in root directory
        .github/scripts/build-rust-windows.bat

    # Flutter Rust Bridge bindings already generated and committed
    # Skipping generation step to avoid package dependency issues
    
    - name: ✅ Verify Rust libraries
      run: |
        chmod +x .github/scripts/verify-rust-libs.sh
        .github/scripts/verify-rust-libs.sh
    
    - name: 📦 Get Flutter dependencies
      run: |
        # Working in root directory
        flutter pub get

    - name: 🔍 Run Flutter analysis
      run: |
        # Working in root directory
        flutter analyze --no-fatal-infos --no-fatal-warnings || true

    - name: 🔧 Setup native assets for Windows
      run: |
        .github\scripts\setup-native-assets-windows.bat

    - name: 🏗️ Build Windows app
      run: |
        # Working in root directory
        # Try to build without the install step that's failing
        flutter build windows --release --no-tree-shake-icons

    - name: 📦 Build Windows MSIX installer
      run: |
        # Install MSIX package tool
        flutter pub get
        # Create MSIX installer (skip certificate installation for CI)
        flutter pub run msix:create --install-certificate false
        # Check where MSIX was created
        if (Test-Path "build\windows\x64\runner\Release\*.msix") {
          Write-Host "MSIX installer created successfully"
          Get-ChildItem "build\windows\x64\runner\Release\*.msix" | ForEach-Object { Write-Host "Found: $($_.Name)" }
        }
      continue-on-error: true

    - name: 📦 Create Windows Portable ZIP
      run: |
        # First, move MSIX out of Release folder if it exists
        if (Test-Path "build\windows\x64\runner\Release\*.msix") {
          Move-Item "build\windows\x64\runner\Release\*.msix" "build\windows\" -Force
          Write-Host "Moved MSIX out of Release folder"
        }
        # Navigate to the Release directory and create portable ZIP (no installer)
        cd build/windows/x64/runner/Release
        7z a -tzip BitcoinZ-Black-Amber-Windows-Portable.zip *
        Write-Host "Created portable ZIP (no installer)"

    - name: 📦 Create Windows Installer ZIP
      run: |
        # Create installer ZIP with just MSIX file
        if (Test-Path "build/windows/*.msix") {
          $msixFile = Get-ChildItem "build/windows/*.msix" | Select-Object -First 1
          # Create ZIP with MSIX in root
          7z a -tzip BitcoinZ-Black-Amber-Windows-Installer.zip $msixFile.FullName
          Write-Host "Created installer ZIP with MSIX"
        } else {
          Write-Host "No MSIX file found, skipping installer ZIP"
        }
      continue-on-error: true

    - name: 📤 Upload Windows Portable
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable
        path: build/windows/x64/runner/Release/BitcoinZ-Black-Amber-Windows-Portable.zip
        if-no-files-found: error
    
    - name: 📤 Upload Windows Installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: BitcoinZ-Black-Amber-Windows-Installer.zip
        if-no-files-found: ignore

  # ================================
  # RELEASE CREATION
  # ================================
  create-release:
    name: 🚀 Create Release
    needs: [build-android, build-ios, build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: 📤 Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/android-apk/*.apk
          artifacts/android-apk/*.aab
          artifacts/macos-app/*.dmg
          artifacts/linux-app/*.deb
          artifacts/linux-app/*.rpm
          artifacts/linux-app/*.AppImage
          artifacts/linux-app/*.tar.gz
          artifacts/windows-portable/*.zip
          artifacts/windows-installer/*.zip
        body: |
          ## 🎉 BitcoinZ Black Amber Release
          
          **Multi-platform cryptocurrency wallet built with Flutter + Rust**
          
          ### 📦 Downloads:
          - **Android**: APK files for all architectures + Play Store AAB
          - **iOS**: Contact for TestFlight/App Store version
          - **macOS**: DMG installer with drag-and-drop installation (extract ZIP first)
          - **Linux**: DEB/RPM packages, AppImage, and portable tar.gz
          - **Windows**: 
            - Portable ZIP (no installation required)
            - Installer ZIP (contains MSIX installer)
          
          ### ⚡ Optimized for Battery Life
          This release includes significant logging optimizations for better battery performance on mobile devices.
          
          ### 🔧 Technical Details
          - **Flutter**: ${{ env.FLUTTER_VERSION }}
          - **Rust**: ${{ env.RUST_VERSION }}
          - **Architecture**: Flutter frontend + Rust FFI backend
          - **Security**: Hardware wallet support, biometric auth, secure storage