// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1645151663;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'bitcoinz_wallet_rust',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> crateApiDeinitialize();

  Future<void> crateApiEmitProgressUpdate(
      {required int progress, required int total});

  Future<String> crateApiExecute(
      {required String command, required String args});

  String crateApiGetAddresses();

  String crateApiGetBalance();

  int crateApiGetHeight();

  String crateApiGetInfo();

  Future<String> crateApiGetNextProgressUpdate();

  String crateApiGetSendProgress();

  Future<String> crateApiGetServerInfo({required String serverUri});

  String crateApiGetSyncStatus();

  String crateApiGetTransactions();

  Future<void> crateApiInitProgressBridge();

  Future<String> crateApiInitProgressStream();

  Future<String> crateApiInitializeExisting(
      {required String serverUri, String? walletDir});

  Future<String> crateApiInitializeExistingWithBirthday(
      {required String serverUri, String? walletDir, required BigInt birthday});

  Future<String> crateApiInitializeFromPhrase(
      {required String serverUri,
      required String seedPhrase,
      required BigInt birthday,
      required bool overwrite,
      String? walletDir});

  Future<String> crateApiInitializeFromPhraseSimple(
      {required String serverUri, required String seedPhrase});

  Future<String> crateApiInitializeNew(
      {required String serverUri, String? walletDir});

  Future<String> crateApiInitializeNewWithInfo(
      {required String serverUri, String? walletDir});

  String crateApiNewAddress({required String addressType});

  Future<String> crateApiSendProgressUpdate({required String progressData});

  Future<String> crateApiSendTransaction(
      {required String address, required PlatformInt64 amount, String? memo});

  Future<String> crateApiSync();

  Future<bool> crateApiWalletExists({String? walletDir});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> crateApiDeinitialize() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDeinitializeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDeinitializeConstMeta => const TaskConstMeta(
        debugName: "deinitialize",
        argNames: [],
      );

  @override
  Future<void> crateApiEmitProgressUpdate(
      {required int progress, required int total}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(progress, serializer);
        sse_encode_u_32(total, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEmitProgressUpdateConstMeta,
      argValues: [progress, total],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEmitProgressUpdateConstMeta => const TaskConstMeta(
        debugName: "emit_progress_update",
        argNames: ["progress", "total"],
      );

  @override
  Future<String> crateApiExecute(
      {required String command, required String args}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(command, serializer);
        sse_encode_String(args, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiExecuteConstMeta,
      argValues: [command, args],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiExecuteConstMeta => const TaskConstMeta(
        debugName: "execute",
        argNames: ["command", "args"],
      );

  @override
  String crateApiGetAddresses() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetAddressesConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetAddressesConstMeta => const TaskConstMeta(
        debugName: "get_addresses",
        argNames: [],
      );

  @override
  String crateApiGetBalance() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetBalanceConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetBalanceConstMeta => const TaskConstMeta(
        debugName: "get_balance",
        argNames: [],
      );

  @override
  int crateApiGetHeight() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetHeightConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetHeightConstMeta => const TaskConstMeta(
        debugName: "get_height",
        argNames: [],
      );

  @override
  String crateApiGetInfo() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetInfoConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetInfoConstMeta => const TaskConstMeta(
        debugName: "get_info",
        argNames: [],
      );

  @override
  Future<String> crateApiGetNextProgressUpdate() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetNextProgressUpdateConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetNextProgressUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "get_next_progress_update",
        argNames: [],
      );

  @override
  String crateApiGetSendProgress() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetSendProgressConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetSendProgressConstMeta => const TaskConstMeta(
        debugName: "get_send_progress",
        argNames: [],
      );

  @override
  Future<String> crateApiGetServerInfo({required String serverUri}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetServerInfoConstMeta,
      argValues: [serverUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetServerInfoConstMeta => const TaskConstMeta(
        debugName: "get_server_info",
        argNames: ["serverUri"],
      );

  @override
  String crateApiGetSyncStatus() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetSyncStatusConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetSyncStatusConstMeta => const TaskConstMeta(
        debugName: "get_sync_status",
        argNames: [],
      );

  @override
  String crateApiGetTransactions() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiGetTransactionsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetTransactionsConstMeta => const TaskConstMeta(
        debugName: "get_transactions",
        argNames: [],
      );

  @override
  Future<void> crateApiInitProgressBridge() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitProgressBridgeConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitProgressBridgeConstMeta => const TaskConstMeta(
        debugName: "init_progress_bridge",
        argNames: [],
      );

  @override
  Future<String> crateApiInitProgressStream() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitProgressStreamConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitProgressStreamConstMeta => const TaskConstMeta(
        debugName: "init_progress_stream",
        argNames: [],
      );

  @override
  Future<String> crateApiInitializeExisting(
      {required String serverUri, String? walletDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        sse_encode_opt_String(walletDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitializeExistingConstMeta,
      argValues: [serverUri, walletDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeExistingConstMeta => const TaskConstMeta(
        debugName: "initialize_existing",
        argNames: ["serverUri", "walletDir"],
      );

  @override
  Future<String> crateApiInitializeExistingWithBirthday(
      {required String serverUri,
      String? walletDir,
      required BigInt birthday}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        sse_encode_opt_String(walletDir, serializer);
        sse_encode_u_64(birthday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitializeExistingWithBirthdayConstMeta,
      argValues: [serverUri, walletDir, birthday],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeExistingWithBirthdayConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_existing_with_birthday",
        argNames: ["serverUri", "walletDir", "birthday"],
      );

  @override
  Future<String> crateApiInitializeFromPhrase(
      {required String serverUri,
      required String seedPhrase,
      required BigInt birthday,
      required bool overwrite,
      String? walletDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        sse_encode_String(seedPhrase, serializer);
        sse_encode_u_64(birthday, serializer);
        sse_encode_bool(overwrite, serializer);
        sse_encode_opt_String(walletDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitializeFromPhraseConstMeta,
      argValues: [serverUri, seedPhrase, birthday, overwrite, walletDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeFromPhraseConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_from_phrase",
        argNames: [
          "serverUri",
          "seedPhrase",
          "birthday",
          "overwrite",
          "walletDir"
        ],
      );

  @override
  Future<String> crateApiInitializeFromPhraseSimple(
      {required String serverUri, required String seedPhrase}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        sse_encode_String(seedPhrase, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitializeFromPhraseSimpleConstMeta,
      argValues: [serverUri, seedPhrase],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeFromPhraseSimpleConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_from_phrase_simple",
        argNames: ["serverUri", "seedPhrase"],
      );

  @override
  Future<String> crateApiInitializeNew(
      {required String serverUri, String? walletDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        sse_encode_opt_String(walletDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitializeNewConstMeta,
      argValues: [serverUri, walletDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeNewConstMeta => const TaskConstMeta(
        debugName: "initialize_new",
        argNames: ["serverUri", "walletDir"],
      );

  @override
  Future<String> crateApiInitializeNewWithInfo(
      {required String serverUri, String? walletDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(serverUri, serializer);
        sse_encode_opt_String(walletDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitializeNewWithInfoConstMeta,
      argValues: [serverUri, walletDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeNewWithInfoConstMeta =>
      const TaskConstMeta(
        debugName: "initialize_new_with_info",
        argNames: ["serverUri", "walletDir"],
      );

  @override
  String crateApiNewAddress({required String addressType}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(addressType, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiNewAddressConstMeta,
      argValues: [addressType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiNewAddressConstMeta => const TaskConstMeta(
        debugName: "new_address",
        argNames: ["addressType"],
      );

  @override
  Future<String> crateApiSendProgressUpdate({required String progressData}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(progressData, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSendProgressUpdateConstMeta,
      argValues: [progressData],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendProgressUpdateConstMeta => const TaskConstMeta(
        debugName: "send_progress_update",
        argNames: ["progressData"],
      );

  @override
  Future<String> crateApiSendTransaction(
      {required String address, required PlatformInt64 amount, String? memo}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_i_64(amount, serializer);
        sse_encode_opt_String(memo, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSendTransactionConstMeta,
      argValues: [address, amount, memo],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendTransactionConstMeta => const TaskConstMeta(
        debugName: "send_transaction",
        argNames: ["address", "amount", "memo"],
      );

  @override
  Future<String> crateApiSync() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSyncConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSyncConstMeta => const TaskConstMeta(
        debugName: "sync",
        argNames: [],
      );

  @override
  Future<bool> crateApiWalletExists({String? walletDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(walletDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWalletExistsConstMeta,
      argValues: [walletDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletExistsConstMeta => const TaskConstMeta(
        debugName: "wallet_exists",
        argNames: ["walletDir"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
